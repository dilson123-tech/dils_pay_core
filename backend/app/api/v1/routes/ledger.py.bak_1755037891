# app/api/v1/routes/ledger.py
from __future__ import annotations

from fastapi import APIRouter, Depends, Query, Response
from sqlalchemy.orm import Session
from sqlalchemy import func, case, asc, desc
from typing import Literal, Optional

from app.database.session import get_db

# ðŸ”Ž Tenta achar o model de transaÃ§Ã£o com nomes comuns
try:
    from app.models.transaction import Transaction as TransactionModel  # noqa: F401
except Exception:
    try:
        from app.models.transaction import TransactionModel as TransactionModel  # type: ignore  # noqa: F401
    except Exception as e:
        raise RuntimeError(
            "NÃ£o encontrei a classe em app.models.transaction. "
            "Esperado 'Transaction' ou 'TransactionModel'. Ajuste o import aqui."
        ) from e

router = APIRouter()

# Campos permitidos para ordenaÃ§Ã£o
VALID_ORDER_FIELDS = {"id", "data", "tipo", "valor", "descricao"}
TipoMov = Literal["CREDITO", "DEBITO"]

def _iso(x: Optional[str]) -> Optional[str]:
    if not x:
        return None
    s = x.strip()
    return s or None

@router.get("/ledger/{ledger_id}")
def get_ledger(
    ledger_id: int,
    response: Response,
    page: int = Query(1, ge=1),
    page_size: int = Query(10, ge=1, le=200),
    tipo: Optional[TipoMov] = Query(None),
    start: Optional[str] = None,   # ISO ex.: 2025-08-12T00:00:00
    end: Optional[str] = None,     # ISO ex.: 2025-08-12T23:59:59
    order_by: str = Query("data"),
    order_dir: Literal["asc", "desc"] = Query("desc"),
    db: Session = Depends(get_db),
):
    """
    Extrato paginado do ledger com totais GLOBAIS nos headers:
      X-Total, X-Total-Credito, X-Total-Debito, X-Total-Saldo,
      X-Total-Pages, X-Page, X-Page-Size
    """
    # 1) Query base + filtros
    q = db.query(TransactionModel).filter(TransactionModel.ledger_id == ledger_id)
    if tipo:
        q = q.filter(TransactionModel.tipo == tipo)

    s = _iso(start)
    e = _iso(end)
    if s:
        q = q.filter(TransactionModel.data >= s)
    if e:
        q = q.filter(TransactionModel.data <= e)

    # 2) Subquery sÃ³ com colunas usadas (pra somas e count)
    subq = q.with_entities(
        TransactionModel.id.label("id"),
        TransactionModel.data.label("data"),
        TransactionModel.tipo.label("tipo"),
        TransactionModel.valor.label("valor"),
        TransactionModel.descricao.label("descricao"),
    ).subquery()

    # 2.1) Totais globais (ignorando paginaÃ§Ã£o)
    total_count = db.query(func.count()).select_from(subq).scalar() or 0

    tot_credito, tot_debito = db.query(
        func.coalesce(func.sum(case((subq.c.tipo == "CREDITO", subq.c.valor), else_=0.0)), 0.0),
        func.coalesce(func.sum(case((subq.c.tipo == "DEBITO",  subq.c.valor), else_=0.0)), 0.0),
    ).one()
    tot_credito = float(tot_credito or 0.0)
    tot_debito  = float(tot_debito  or 0.0)
    saldo = tot_credito - tot_debito

    # 3) OrdenaÃ§Ã£o server-side (com saneamento do campo)
    field = order_by if order_by in VALID_ORDER_FIELDS else "data"
    col = getattr(TransactionModel, field)
    q_sorted = q.order_by(asc(col) if order_dir == "asc" else desc(col))

    # 4) PaginaÃ§Ã£o
    items = q_sorted.offset((page - 1) * page_size).limit(page_size).all()

    # 5) Headers (sempre consistentes)
    total_pages = max(1, (total_count + page_size - 1) // page_size)
    response.headers["X-Total"] = str(total_count)
    response.headers["X-Total-Count"] = str(total_count)
    response.headers["X-Total-Pages"] = str(total_pages)
    response.headers["X-Page"] = str(page)
    response.headers["X-Page-Size"] = str(page_size)
    response.headers["X-Total-Credito"] = f"{tot_credito:.2f}"
    response.headers["X-Total-Debito"]  = f"{tot_debito:.2f}"
    response.headers["X-Total-Saldo"]   = f"{saldo:.2f}"

    # 6) Corpo (lista de dicts)
    out = []
    for it in items:
        data_iso = it.data.isoformat() if hasattr(it.data, "isoformat") else str(it.data)
        out.append({
            "id": it.id,
            "data": data_iso,
            "tipo": it.tipo,
            "valor": float(it.valor),
            "descricao": it.descricao or "",
        })
    return out
